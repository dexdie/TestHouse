@using TestHouse.DTOs.DTOs
@using TestHouse.DTOs.Models
@inject TestHouse.Web.Blazor.Services.SuitService _suitService;
@inject TestHouse.Web.Blazor.Services.TestCasesService _testCasesService;



<li class="level suit">

    <div class="level-left">
        @if (SelectMode)
        {
            <div class="level-item">
                <input type="checkbox" checked="@IsSuitSelected" @onchange="@((ChangeEventArgs __e) => IsSuitSelected = (bool) __e.Value  )"  />
            </div>
        }
        <div class="level-item">@Suit.Name - @Suit.Description</div>

    </div>

    @if (EditMode)
    {
        <div class="level-right suit-actions @(IsSuitFormActive || IsTestCaseFormActive ? " is-hidden" : "")">
            <div class="level-item">
                <a class="button is-small is-primary is-outlined" @onclick="@(() => IsSuitFormActive = true)">
                    <span class="icon">
                        <i class="fas fa-plus" />
                    </span>
                    <span>Subsection</span>
                </a>
            </div>
            <div class="level-item">
                <a class="button is-small is-primary is-outlined" @onclick="@(() => IsTestCaseFormActive = true)">
                    <span class="icon">
                        <i class="fas fa-plus" />
                    </span>
                    <span>TestCase</span>
                </a>
            </div>
        </div>

        <div class="level-right  @(IsSuitFormActive ? "" : " is-hidden")">
            <div class="level-item">
                <div class="field has-addons">
                    <p class="control">
                        <input class="input is-small add-item-input" type="text" placeholder="New subsection name" bind="@NewSuitName" />
                    </p>
                    <p class="control">
                        <button class="button is-small is-success" @onclick="AddNewSuit">
                            <span class="icon">
                                <i class="fas fa-plus" />
                            </span>
                        </button>
                    </p>
                    <p class="control">
                        <button class="button is-small is-danger" @onclick="@(() => IsSuitFormActive = false)">
                            <span class="icon">
                                <i class="fas fa-minus" />
                            </span>
                        </button>
                    </p>
                </div>
            </div>
        </div>

        <div class="level-right @(IsTestCaseFormActive ? "" : " is-hidden")">
            <div class="level-item">
                <div class="field has-addons">
                    <p class="control">
                        <input class="input is-small add-item-input" type="text" placeholder="New testcase name" bind="@NewTestCaseName" />
                    </p>
                    <p class="control">
                        <button class="button is-small is-success" @onclick="AddNewTestCase">
                            <span class="icon">
                                <i class="fas fa-plus" />
                            </span>
                        </button>
                    </p>
                    <p class="control">
                        <button class="button is-small is-danger" @onclick="@(() => IsTestCaseFormActive = false)">
                            <span class="icon">
                                <i class="fas fa-minus" />
                            </span>
                        </button>
                    </p>
                </div>
            </div>
        </div>
    }
</li>


@if (Suit.TestCases != null && Suit.TestCases.Any())
{
    <ul class="test-case-list">
        @foreach (var testCase in Suit.TestCases)
        {
            <li class="test-case level">

                <div class="level-left">
                    @if (SelectMode)
                    {
                        <div class="level-item">
                            <input type="checkbox" checked="@testCase.IsSelected" @onchange="@((ChangeEventArgs __e) => testCase.IsSelected = (bool) __e.Value  )" />
                        </div>
                    }
                    <div>@testCase.Name</div>
                </div>
            </li>
        }
    </ul>
}

@if (Suit.Suits != null && Suit.Suits.Any())
{
    <ul class="suit-list">
        @foreach (var suit in Suit.Suits)
        {
            <Items Suit="suit" ProjectId="ProjectId" EditMode="EditMode" SelectMode="SelectMode"></Items>
        }
    </ul>
}



@code{

    [Parameter] public SuitDto Suit { get; set; }
    [Parameter] public long ProjectId { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public bool SelectMode { get; set; }

    bool IsSuitFormActive { get; set; }
    bool IsTestCaseFormActive { get; set; }
    string NewSuitName { get; set; }
    string NewTestCaseName { get; set; }
    public bool IsSuitSelected
    {
        get
        {
            return Suit.IsSelected;
        }
        set
        {
            Console.WriteLine("Suit is selected " + value);
            Suit.IsSelected = value;
              ChangeChildsSelection(Suit,value);
        }
    }
    

    protected override void OnInitialized()
    {
        try
        {
            Suit.IsSelected = true;

            foreach(var testCase in Suit.TestCases)
            {
                testCase.IsSelected = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("exc" + e.GetType() + e.Message);
        }
    }

    private async Task AddNewSuit()
    {
        SuitModel newSuitModel = new SuitModel()
        {
            Name = NewSuitName,
            ProjectId = ProjectId,
            ParentId = Suit.Id,
        };

        try
        {
            var newSuit = await _suitService.Add(newSuitModel);

            Suit.Suits = (Suit.Suits != null)
                ? Suit.Suits.Append(newSuit)
                : new List<SuitDto>() { newSuit };

            NewSuitName = "";
            IsSuitFormActive = false;

        }
        catch (Exception e)
        {
            Console.WriteLine("exc" + e.GetType() + e.Message);
        }
    }

    private async Task AddNewTestCase()
    {
        var newTestCaseModel = new TestCaseModel()
        {
            Name = NewTestCaseName,
            SuitId = Suit.Id,
            ProjectId = ProjectId
        };

        try
        {
            var newTestCase = await _testCasesService.Add(newTestCaseModel);

            Suit.TestCases = (Suit.TestCases != null)
                ? Suit.TestCases.Append(newTestCase)
                : new List<TestCaseDto>() { newTestCase };

            NewTestCaseName = "";
            IsTestCaseFormActive = false;

        }
        catch (Exception e)
        {
            Console.WriteLine("exc" + e.GetType() + e.Message);
        }
    }


    //change select value for all childs recursively
    private void ChangeChildsSelection(SuitDto suit, bool value)
    {

        if (suit.TestCases != null)
        {
            foreach (var testCase in suit.TestCases)
            {
                testCase.IsSelected = value;
            }
        }

        //CAN'T USE RECURSION, recursion causes - rangeerror maximum call stack size exceeded
        var suits = suit.Suits;
        while (suits != null && suits.Any())
        {
            var newLevelSuits = new List<SuitDto>();
            foreach (var subSuit in suits)
            {
                subSuit.IsSelected = value;

                if (subSuit.TestCases != null)
                {
                    foreach (var testCase in subSuit.TestCases)
                    {
                        testCase.IsSelected = value;
                    }
                }

                if (subSuit.Suits != null)
                {
                    newLevelSuits.AddRange(subSuit.Suits);
                }
            }

            suits = newLevelSuits;
        }
    }
}
