@page "/project/{ProjectId:int}"
@inject TestHouse.Web.Blazor.Services.ProjectService _projectService;
@inject TestHouse.Web.Blazor.Services.SuitService _suitService;
@using TestHouse.DTOs.DTOs
@using TestHouse.DTOs.Models
@using TestHouse.Web.Blazor.Components;
@using TestHouse.Web.Blazor.Components.TestCases;
@using TestHouse.Web.Blazor.Components.Project;

<main class="section">
    <div class="container">
        <div class="columns">
            <div class="column">

                @if (Project == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <Tab ActiveName="TestCases" ProjectId="@ProjectId" />

                    <Breadcrumb ActivePages=@ActivePages />

                    <div class="columns">
                        <div class="column">
                            <ul class="suit-list">
                                <Items Suit="Project.RootSuit" ProjectId="ProjectId" EditMode="true"></Items>
                            </ul>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</main>

@code{
    [Parameter] private int ProjectId { get; set; } = 0;

    private bool IsSuitActive { get; set; } = false;
    private bool IsTestCaseActive { get; set; } = false;
    private string NewSuitName { get; set; } = "";
    private ProjectAggregateDto Project { get; set; } = null;

    private List<PageId> ActivePages = new List<PageId>() { PageId.Projects, PageId.Cases };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("getting project");
            Project = await _projectService.GetProject(ProjectId);
        }
        catch (Exception e)
        {
            Console.WriteLine("exc" + e.GetType() + e.Message);
        }
    }
}
