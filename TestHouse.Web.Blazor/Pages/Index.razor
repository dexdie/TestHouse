@page "/"
@inject TestHouse.Web.Blazor.Services.ProjectService _projectService;

@using Microsoft.AspNetCore.Blazor.Services
@using TestHouse.DTOs.DTOs
@using TestHouse.DTOs.Models
<section class="hero is-light">
    <div class="hero-body">
        <div class="container">
            <h1 class="title is-2 has-text-centered">Modern Test Case Management Software</h1>
            <h3 class="subtitle is-4 has-text-centered">for QA and Development Teams</h3>
        </div>
    </div>
</section>

<main class="section">
    <div class="container">
        <div class="columns">
            <div class="column">
                <div class="content">
                    <a class="button is-primary" @onclick="ShowModal">
                        <span class="icon">
                            <i class="fas fa-plus" />
                        </span>
                        <span>New project</span>
                    </a>
                </div>

                <div class="modal @(isModalActive ? "is-active" : "")">
                    <div class="modal-background" @onclick="CloseModal"></div>
                    <div class="modal-content">
                        <div class="card">
                            <header class="card-header">
                                <p class="card-header-title">
                                    New project
                                </p>
                                <a  @onclick="CloseModal" class="card-header-icon" aria-label="more options">
                                    <span class="icon">
                                        <i class="fas fa-times" aria-hidden="true"></i>
                                    </span>
                                </a>
                            </header>
                            <div class="card-content">                                
                                <div class="th-form-content">
                                    <EditForm Model="@projectForm" OnValidSubmit="@SubmitProjectForm">
                                        <DataAnnotationsValidator />
                                        @*<ValidationSummary />*@
                                        <div class="field">
                                            <label class="label  has-text-grey has-text-weight-normal">Name</label>
                                            <div class="control">
                                                <InputText id="name" class="input" @bind-Value="@projectForm.Name" />
                                                <div class="has-text-danger"><ValidationMessage For="@(() => projectForm.Name)" /></div>
                                            </div>
                                            <p class="help has-text-grey">Enter a unique name</p>
                                        </div>
                                        <div class="field">
                                            @*  *@
                                            <label class="label  has-text-grey has-text-weight-normal">Description</label>
                                            <div class="control">
                                                <InputText id="description" class="input" @bind-Value="@projectForm.Description" />
                                                <div class="has-text-danger"><ValidationMessage For="@(() => projectForm.Description)" /></div>
                                            </div>
                                        </div>
                                        <button type="submit" class="button is-link">Add</button>
                                    </EditForm>
                                </div>                                
                            </div>
                        </div>
                    </div>
                    <button class="modal-close is-large" aria-label="close" @onclick="CloseModal"></button>
                </div>


                <div class="modal @(isEditModalActive ? "is-active" : "" )">
                    <div class="modal-background" @onclick="CloseEditModal"></div>
                    <div class="modal-content">
                        <div class="card">
                            <header class="card-header">
                                <p class="card-header-title">
                                    Edit Project
                                </p>
                                <a href="#" class="card-header-icon" aria-label="more options">
                                    <span class="icon">
                                        <i class="fas fa-angle-down" aria-hidden="true"></i>
                                    </span>
                                </a>
                            </header>
                            <div class="card-content">
                                <EditForm Model="@editProjectForm" OnValidSubmit="@EditProjectForm">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    <div class="field">
                                        <label class="label">Name</label>
                                        <div class="control">
                                            <InputText id="name" class="input" @bind-Value="@editProjectForm.Name" />
                                        </div>
                                    </div>
                                    <div class="field">
                                        <label class="label">Description</label>
                                        <div class="control">
                                            <InputText id="description" class="input" @bind-Value="@editProjectForm.Description" />
                                        </div>
                                    </div>
                                    <button type="submit" class="button is-link">Edit</button>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                    <button class="modal-close is-large" aria-label="close" @onclick="CloseEditModal"></button>
                </div>

                <div class="modal  @(isRemoveModalActive ? "is-active" : "" )">
                    <div class="modal-background" @onclick="CloseEditModal"></div>
                    <div class="modal-card">
                        <header class="modal-card-head">
                            <p class="modal-card-title">Confirm delete</p>
                            <button class="delete" aria-label="close" @onclick="CloseRemoveModal"></button>
                        </header>
                        <section class="modal-card-body">
                            Are you sure you want to delete project <span id="bookTitleField">@removeProjectForm.Name</span>?
                        </section>
                        <footer class="modal-card-foot">
                            <button class="button is-danger" @onclick="RemoveProject">Delete</button>
                            <button class="button" @onclick="CloseRemoveModal">Cancel</button>
                        </footer>
                    </div>
                </div>
                @if (projects == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <div class="columns is-multiline is-variable is-1-mobile is-1-tablet is-3-desktop is-8-widescreen is-2-fullhd">
                        @foreach (var project in projects)
                        {
                            <div class="column">
                                <div class="card">
                                    <header class="card-header">
                                        <p class="card-header-title">
                                            @project.Name
                                        </p>
                                        <div class="card-header-icon" aria-label="more options">
                                            <small class="has-text-grey-light is-pulled-right">
                                                <time datetime="@project.CreatedAt.ToString("yyyy-mm-dd")">@project.CreatedAt.ToString("dd.MM.yy")</time>
                                            </small>
                                        </div>
                                    </header>
                                    <div class="card-content">
                                        <div class="content">
                                            <p>@GetShortDescription(project.Description)</p>
                                            <br>
                                        </div>
                                    </div>
                                    <footer class="card-footer">
                                        <a href="/project/@project.Id" class="card-footer-item"><span class="icon"><i class="fas fa-angle-right" style="font-size:1.5em"></i></span></a>
                                        <a href="#" class="card-footer-item btn btn-link" @onclick="@(() => FillEditProjectForm(project.Id))"><span class="icon"><i class="fas fa-edit"></i></span></a>
                                        <a href="#" class="card-footer-item btn btn-link" @onclick="@(() => FillRemoveProjectForm(project.Id))"><span class="icon"><i class="fas fa-trash"></i></span></a>
                                    </footer>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</main>

@code {

    List<ProjectDto> projects;
    bool isModalActive;
    bool isEditModalActive;
    bool isRemoveModalActive;
    ProjectModel projectForm = new ProjectModel();
    ProjectModel editProjectForm = new ProjectModel();
    ProjectModel removeProjectForm = new ProjectModel();
    long editProjectId;
    long removeProjectId;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            projects = await _projectService.GetProjectsAsync();

        }
        catch (Exception e)
        {
            Console.WriteLine("exc" + e.GetType() + e.Message);
        }
    }

    private void ShowModal() => isModalActive = true;

    private void CloseModal() => isModalActive = false;

    private void ShowEditModal() => isEditModalActive = true;
    private void CloseEditModal() => isEditModalActive = false;

    private void ShowRemoveModal() => isRemoveModalActive = true;
    private void CloseRemoveModal() => isRemoveModalActive = false;

    private async Task SubmitProjectForm()
    {
        var newProject = await _projectService.AddProject(projectForm);
        projects.Add(newProject);
        projectForm = new ProjectModel();
        CloseModal();
    }
    private void FillEditProjectForm(long id)
    {
        var project = projects.FirstOrDefault(x => x.Id == id);
        editProjectId = id;
        editProjectForm = new ProjectModel() { Name = project.Name, Description = project.Description };
        ShowEditModal();
    }
    private void FillRemoveProjectForm(long id)
    {
        var project = projects.FirstOrDefault(x => x.Id == id);
        removeProjectId = id;
        removeProjectForm = new ProjectModel() { Name = project.Name, Description = project.Description };
        ShowRemoveModal();
    }
    private async Task EditProjectForm()
    {
        await _projectService.EditProject(editProjectId, editProjectForm);
        CloseEditModal();
        var project = projects.FirstOrDefault(x => x.Id == editProjectId);
        if (project != null)
        {
            project.Name = editProjectForm.Name;
            project.Description = editProjectForm.Description;
        }
    }
    private async Task RemoveProject()
    {
        await _projectService.RemoveProject(removeProjectId);
        CloseRemoveModal();
        var project = projects.FirstOrDefault(x => x.Id == removeProjectId);
        if (project != null)
        {
            projects.Remove(project);
        }
    }

    private string GetShortDescription(string description)
    {
        int descrioptionLimit = 10;

        if (!string.IsNullOrEmpty(description) && description.Count() > descrioptionLimit)
        {
            return $"{description.Substring(0, descrioptionLimit)}...";
        }
        return description;
    }
}
